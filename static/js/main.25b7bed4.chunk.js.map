{"version":3,"sources":["FormEdit.js","Text.js","App.js","logo.svg","reportWebVitals.js","index.js"],"names":["FormEdit","props","state","firstName","lastName","edit","editFirstName","editLastName","handleNameChange","bind","event","this","setState","target","name","value","className","type","placeholder","onChange","onClick","editButton","cancelButton","Component","Text","text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA0DgBA,E,kDAvDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,UAAWF,EAAME,UACjBC,SAAUH,EAAMG,SAChBC,MAAM,EACNC,cAAeL,EAAME,UAClBI,aAAcN,EAAMG,UAE3B,EAAKI,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBATP,E,6DAYFC,GACbC,KAAKC,SAAL,eACKF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,iCAI/BL,GACPC,KAAKC,SAAS,CACVP,MAAOM,KAAKT,MAAMG,KAClBC,cAAeK,KAAKT,MAAMC,UAC1BI,aAAcI,KAAKT,MAAME,a,mCAIpBM,GACTC,KAAKC,SAAS,CACVP,MAAM,EACNF,UAAWQ,KAAKT,MAAMI,cACtBF,SAAUO,KAAKT,MAAMK,iB,+BAInB,IAAD,OACL,OAAO,mCACL,8BACCI,KAAKT,MAAMG,KACZ,sBAAKW,UAAU,UAAf,UACK,uBAAOA,UAAU,QAAQC,KAAM,OAAOH,KAAM,YAAYC,MAAQJ,KAAKT,MAAMC,UAAWe,YAAY,YAAYC,SAAWR,KAAKH,mBACjI,uBAAOQ,UAAU,SAASC,KAAM,OAAOH,KAAM,WAAWC,MAAQJ,KAAKT,MAAME,SAAUc,YAAY,iBAAiBC,SAAWR,KAAKH,mBAClI,wBAAQQ,UAAU,OAAOI,QAAS,kBAAM,EAAKC,WAAW,EAAKnB,QAA7D,kBACA,wBAAQc,UAAU,QAAQI,QAAS,kBAAM,EAAKE,aAAa,EAAKpB,QAAhE,uBAEI,sBAAKc,UAAU,SAAf,UACE,6CAAgBL,KAAKT,MAAMC,aAC3B,4CAAeQ,KAAKT,MAAME,YAC1B,wBAAQY,UAAU,MAAMI,QAAS,kBAAM,EAAKC,WAAW,EAAKnB,QAA5D,6B,GAhDOqB,aCgBTC,EAfF,SAAAvB,GAAU,IACXe,EAAoBf,EAApBe,UAAWS,EAASxB,EAATwB,KAEnB,OACI,oBAAIT,UAAWA,EAAf,SACSS,KCWFC,GCnBA,I,6KDQX,OACE,sBAAKV,UAAU,MAAf,UACI,cAAC,EAAD,CAAMA,UAAU,WAAWS,KAAK,aAChC,cAAC,EAAD,CAAMT,UAAU,UAAWS,KAAK,oFAChC,cAAC,EAAD,CAAMT,UAAU,WAAWS,KAAK,8GAChC,cAAC,EAAD,CAAUtB,UAAY,GAAIC,SAAW,GAAIC,MAAO,W,GAPxCkB,cEMHI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.25b7bed4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\tclass FormEdit extends Component {\n\t  constructor(props) {\n\t    super(props);\n\t    this.state = {\n\t        firstName: props.firstName, \n\t        lastName: props.lastName, \n\t        edit: false,\n\t        editFirstName: props.firstName,\n            editLastName: props.lastName,\n\t    }\n\t    this.handleNameChange = this.handleNameChange.bind(this);\n\t  }\n\t\n\t  handleNameChange(event) {\n\t      this.setState({\n\t          [event.target.name]: event.target.value\n\t      });\n\t  }\n\t\n\t  editButton(event) {\n\t      this.setState({\n\t          edit: !this.state.edit,\n\t          editFirstName: this.state.firstName,\n\t          editLastName: this.state.lastName,\n\t      });\n\t  }\n\t\n\t  cancelButton(event) {\n\t      this.setState({\n\t          edit: false,\n\t          firstName: this.state.editFirstName,\n\t          lastName: this.state.editLastName,\n\t      })\n\t  }\n\t\n\t  render() {\n\t      return <>\n\t        <div>\n\t        {this.state.edit ? \n\t        <div className=\"buttons\">\n              <input className=\"input\" type= 'text' name= \"firstName\" value= {this.state.firstName} placeholder=\"Your Name\" onChange= {this.handleNameChange} />\n\t          <input className=\"input2\" type= 'text' name= \"lastName\" value= {this.state.lastName} placeholder=\"Your Last Name\" onChange= {this.handleNameChange} />\n\t          <button className=\"btns\" onClick={() => this.editButton(this.state)}>Save</button>\n\t          <button className=\"btns2\" onClick={() => this.cancelButton(this.state)}>Cancel</button>\n\t        </div>\n\t            : <div className=\"button\">\n\t                <p>First Name: {this.state.firstName}</p> \n\t                <p>Last Name: {this.state.lastName}</p>\n\t                <button className=\"btn\" onClick={() => this.editButton(this.state)}>edit</button>\n\t            </div>\n\t        }\n\t        </div>\n\t      </>\n\t  }\n\t}\n\t\n\texport default FormEdit;\n\n","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Text = props => {\n    const { className, text } = props;\n\n    return (\n        <h1 className={className}>\n                {text}\n        </h1>\n    );\n}\n\nText.propTypes = {\n    className: PropTypes.string,\n    text: PropTypes.string.isRequired\n}\n\nexport default Text;","import React, { Component } from \"react\";\nimport FormEdit from \"./FormEdit\";\nimport Text from \"./Text\";\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Text className=\"greeting\" text=\"WELCOME!\"/>\n          <Text className=\"message\"  text=\"Please click on 'edit' in order to enter your full name in the spaces provided.\"/>\n          <Text className=\"message1\" text=\"Once, you're done - click 'save' to store your full name, or you can press 'cancel' if you decide not to.\"/>\n          <FormEdit firstName= {\"\"} lastName= {\"\"} edit= {false}/>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}